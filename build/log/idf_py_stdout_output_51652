[1/14] Generating ../../partition_table/partition-table.bin
Partition table binary generated. Contents:
*******************************************************************************
# ESP-IDF Partition Table
# Name, Type, SubType, Offset, Size, Flags
nvs,data,nvs,0x9000,24K,
phy_init,data,phy,0xf000,4K,
factory,app,factory,0x10000,1M,
*******************************************************************************
[2/14] Generating x509_crt_bundle
[3/14] Generating ../../x509_crt_bundle.S
[4/14] Building ASM object esp-idf/mbedtls/CMakeFiles/__idf_mbedtls.dir/__/__/x509_crt_bundle.S.obj
[5/14] Linking C static library esp-idf/mbedtls/libmbedtls.a
[6/14] Performing configure step for 'bootloader'
-- Building ESP-IDF components for target esp32
-- Project sdkconfig file /Users/marcus/git/nvs_rw_value/sdkconfig
Compiler supported targets: xtensa-esp32-elf

-- Adding linker script /Users/marcus/Documents/esp/esp-idf/components/soc/esp32/ld/esp32.peripherals.ld
-- App "bootloader" version: v5.1-dev-3619-g57b6be22a7
-- Adding linker script /Users/marcus/Documents/esp/esp-idf/components/esp_rom/esp32/ld/esp32.rom.ld
-- Adding linker script /Users/marcus/Documents/esp/esp-idf/components/esp_rom/esp32/ld/esp32.rom.api.ld
-- Adding linker script /Users/marcus/Documents/esp/esp-idf/components/esp_rom/esp32/ld/esp32.rom.libgcc.ld
-- Adding linker script /Users/marcus/Documents/esp/esp-idf/components/esp_rom/esp32/ld/esp32.rom.newlib-funcs.ld
-- Adding linker script /Users/marcus/Documents/esp/esp-idf/components/bootloader/subproject/main/ld/esp32/bootloader.ld
-- Adding linker script /Users/marcus/Documents/esp/esp-idf/components/bootloader/subproject/main/ld/esp32/bootloader.rom.ld
-- Components: bootloader bootloader_support efuse esp_app_format esp_common esp_hw_support esp_rom esp_system esptool_py freertos hal log main micro-ecc newlib partition_table soc spi_flash xtensa
-- Component paths: /Users/marcus/Documents/esp/esp-idf/components/bootloader /Users/marcus/Documents/esp/esp-idf/components/bootloader_support /Users/marcus/Documents/esp/esp-idf/components/efuse /Users/marcus/Documents/esp/esp-idf/components/esp_app_format /Users/marcus/Documents/esp/esp-idf/components/esp_common /Users/marcus/Documents/esp/esp-idf/components/esp_hw_support /Users/marcus/Documents/esp/esp-idf/components/esp_rom /Users/marcus/Documents/esp/esp-idf/components/esp_system /Users/marcus/Documents/esp/esp-idf/components/esptool_py /Users/marcus/Documents/esp/esp-idf/components/freertos /Users/marcus/Documents/esp/esp-idf/components/hal /Users/marcus/Documents/esp/esp-idf/components/log /Users/marcus/Documents/esp/esp-idf/components/bootloader/subproject/main /Users/marcus/Documents/esp/esp-idf/components/bootloader/subproject/components/micro-ecc /Users/marcus/Documents/esp/esp-idf/components/newlib /Users/marcus/Documents/esp/esp-idf/components/partition_table /Users/marcus/Documents/esp/esp-idf/components/soc /Users/marcus/Documents/esp/esp-idf/components/spi_flash /Users/marcus/Documents/esp/esp-idf/components/xtensa
-- Configuring done
-- Generating done
-- Build files have been written to: /Users/marcus/git/nvs_rw_value/build/bootloader
[7/14] Performing build step for 'bootloader'
[1/2] Generating binary image from built executable
esptool.py v4.5
Creating esp32 image...
Merged 1 ELF section
Successfully created esp32 image.
Generated /Users/marcus/git/nvs_rw_value/build/bootloader/bootloader.bin
[2/2] cd /Users/marcus/git/nvs_rw_value/build/bootloader/esp-idf/esptool_py && /Users/marcus/.espressif/python_env/idf5.1_py3.11_env/bin/python /Users/marcus/Documents/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 /Users/marcus/git/nvs_rw_value/build/bootloader/bootloader.bin
Bootloader binary size 0x6740 bytes. 0x8c0 bytes (8%) free.
[8/13] Completed 'bootloader'
[9/13] Generating ld/sections.ld
[10/13] Linking CXX executable nvs_rw_value.elf
[11/13] Generating binary image from built executable
esptool.py v4.5
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated /Users/marcus/git/nvs_rw_value/build/nvs_rw_value.bin
[12/13] cd /Users/marcus/git/nvs_rw_value/build/esp-idf/esptool_py && /Users/marcus/.espressif/python_env/idf5.1_py3.11_env/bin/python /Users/marcus/Documents/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 partition --type app /Users/marcus/git/nvs_rw_value/build/partition_table/partition-table.bin /Users/marcus/git/nvs_rw_value/build/nvs_rw_value.bin
nvs_rw_value.bin binary size 0x2f7d0 bytes. Smallest app partition is 0x100000 bytes. 0xd0830 bytes (81%) free.
[12/13] cd /Users/marcus/Documents/esp/esp-idf/components/esptool_py && /Users/marcus/.espressif/tools/cmake/3.24.0/CMake.app/Contents/bin/cmake -D IDF_PATH=/Users/marcus/Documents/esp/esp-idf -D "SERIAL_TOOL=/Users/marcus/.espressif/python_env/idf5.1_py3.11_env/bin/python;;/Users/marcus/Documents/esp/esp-idf/components/esptool_py/esptool/esptool.py;--chip;esp32" -D "SERIAL_TOOL_ARGS=--before=default_reset;--after=hard_reset;write_flash;@flash_args" -D WORKING_DIRECTORY=/Users/marcus/git/nvs_rw_value/build -P /Users/marcus/Documents/esp/esp-idf/components/esptool_py/run_serial_tool.cmake
esptool esp32 -p /dev/cu.usbserial-8 -b 460800 --before=default_reset --after=hard_reset write_flash --flash_mode dio --flash_freq 40m --flash_size 2MB 0x1000 bootloader/bootloader.bin 0x10000 nvs_rw_value.bin 0x8000 partition_table/partition-table.bin
esptool.py v4.5
Serial port /dev/cu.usbserial-8
Connecting....
Chip is ESP32-D0WDQ6 (revision v1.0)
Features: WiFi, BT, Dual Core, 240MHz, VRef calibration in efuse, Coding Scheme None
Crystal is 40MHz
MAC: 4c:eb:d6:74:c3:14
Uploading stub...
Running stub...
Stub running...
Changing baud rate to 460800
Changed.
Configuring flash size...
Flash will be erased from 0x00001000 to 0x00007fff...
Flash will be erased from 0x00010000 to 0x0003ffff...
Flash will be erased from 0x00008000 to 0x00008fff...
Compressed 26432 bytes to 16578...
Writing at 0x00001000... (50 %)
Writing at 0x0000763b... (100 %)
Wrote 26432 bytes (16578 compressed) at 0x00001000 in 0.9 seconds (effective 248.2 kbit/s)...
Hash of data verified.
Compressed 194512 bytes to 110029...
Writing at 0x00010000... (14 %)
Writing at 0x0001c414... (28 %)
Writing at 0x00021ce7... (42 %)
Writing at 0x000273d1... (57 %)
Writing at 0x0002ccf3... (71 %)
Writing at 0x00034596... (85 %)
Writing at 0x0003b44a... (100 %)
Wrote 194512 bytes (110029 compressed) at 0x00010000 in 2.7 seconds (effective 566.5 kbit/s)...
Hash of data verified.
Compressed 3072 bytes to 103...
Writing at 0x00008000... (100 %)
Wrote 3072 bytes (103 compressed) at 0x00008000 in 0.1 seconds (effective 252.9 kbit/s)...
Hash of data verified.

Leaving...
Hard resetting via RTS pin...
